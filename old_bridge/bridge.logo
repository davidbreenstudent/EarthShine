to test-wlrl :node
let [ num 0 ]
talkto 16
init-jlogo
make "heartbeat false
talkto :node
loop [
  repeat 3 [
  wl $1f00 (se :num :num + 1 :num + 2 0 0 0 0 0 0 0)
  wait 100
  ]
  print "|....start...........|
  repeat 100 [
    print rl $1f00 10
    wait 100
  ]
  make "num :num + 1
  print "|....end.............|
  print exec "date.sh
  wait 600
]
end

to run-once-fft
  print "|Begin test-fft|
  test-fft
  print "|Wait 10 Minutes|
  wait 10 * 600 
  print "continue
end

to Xrun-once
  init-jlogo
  make "heartbeat false
  talkto 16 + $80
  test-rl
end

to init-jlogo
  init-time
  init-ulogo
end

to init-ulogo
  stopvm        ;stop vm makes sure the board is not running
  ul-power      ;run power up sequence
;  ul-init       ;run initialization sequence
;  ul-go         ;start experiment
end

to Xrun-X
; make "master-packet 50
; make "oldcheck 0
 init-jlogo
 make "srcfile "bridge.prj
 compile
 ul-blind-run [ packet-loop ]
 talkto 16
 loop [ receive-packet
        wait 10 ]
end

to Yrun-once
 init-time
 talkto 16
;  make "heartbeat false
 wait 100
 loop [ receive-packet wait 20 ] 
end

to run-once    ; every experiment should have version of this word
               ; what it does is up to the coder
               ; this example runs the code for ~20 minutes and stops
 talkto 16
; init-jlogo
 init-time
  loop [
    if (elapsedTime > ( 20 * 60)) [ stop ] ; stop after ~20 minutes
    receive-packet     ; get packets from app boards via one wire network
    wait 20       ; wait ~100 one tenth seconds or ~10 seconds
 ;   screencapture    ; option to display desktop on a website
   ]
end


to XXrun-once
  init-time
  loop [
       receive-packet
  ]
end

to Zrun-once
  if not (name? "ochecknum) [make "ochecknum 0]
  loop [
     make "packet-bytes rl $1fc0 40
     make "type nth 1 :packet-bytes
     make "wp packet-words :packet-bytes
     let [csum 0]
     dotimes [i count :wp] [ make "csum :csum + nth :i :wp ]
     make "csum  (:csum / 65536 )
     make "csum  :csum - int ( :csum )

     make "checknum last :wp
     if not (:checknum = :ochecknum) [
        if not ( (count :packet-bytes) = 0) [
           print-packet
           if (:csum = 0) [print-packet]
        ]
     ]
     make "ochecknum :checknum
    wait 50
  ]
end

to process-data-packet
   plot-gyroZ
end

to test-fft
  project "bridge
  test-fft-A
  test-fft-B
  wait 300
end

to test-fft-A
 make "heartbeat false
 talkto 16
 init-ulogo
 make "srcfile "bridge.prj
 compile
 ul-blind-run [ do_receiveloop ]
 make "srcfile "coil.prj
 compile
 talkto 27
 print "|init 27|
 init-ulogo
 print "|run flight_ft|
 ul-run [flight_ft]
 print "|finished flight_ft|
end

to test-fft-B
 make "heartbeat false
 talkto 27
 make "steadyPlot true
 desktop-clear
 print "|start Xmagdata|
 Xmagdata
 print "|finish Xmagdata|
end 

to test-fft-C
 talkto 27
 ul-power
 ul-init
 ul-run [flight_ft]
 test-fft-B
end

;to test-rl
;  ul-power
;  ul-init
;  ul-go
;  make "heartbeat false

  make "cnt 0
  loop [

    make "cntlist (se :cnt + 0 :cnt + 1 :cnt + 2)
    make "cntlist16 (se :cntlist 0 0 0 0 0 0 0)
    make "cntlist27 (se 0 0 0 0 0 0 0 :cntlist)

    wait 10
    talkto 16 + $80
    print (se "talkto :who)
    wl $1f00 :cntlist16 
    print rl $1f00 10

    wait 10
    talkto 27
    print (se "talkto :who)
    wl $1f00 :cntlist27 
    print rl $1f00 10

    make "cnt :cnt + 1
    screencapture
    wait 300
    
  ]
end

to init
  ul-run [Xonpowerup]
  ul-run [do_onstart]
  ul-run [do_receiveloop]
end

to reset
  ul-blind-run [ write $120 0 ]
end

to run-gyro
  make "gyroz-data []
  make "check 0
  make "ftime 0
  setup-screen
  wait 20
  loop [
      talkto 22
      print "|22 Gyro|
      ongo
      wait 20
      update-packet

      wait 100
      print "|21 DSSP|
      talkto 21
      ongo
      wait 100
      ]
end

to see-packets
  let [cnt 0]
  make "gyroz-data []
  make "check 0
  make "ftime 0
  setup-screen
  loop [
  ;  print :cnt
    make "packet-bytes rl $1fc0 42
  ;  print :packet-bytes
  ;  print count :packet-bytes
    make "cnt :cnt + 1
    if (count :packet-bytes) > 4 [ process-packet ]
    wait 30   ; wait 30 sec
    ]
end

to see-RD3024
  let [cnt 0]
  make "gyroz-data []
  make "check 0
  make "ftime 0
  setup-screen
;  loop [
  ;  print :cnt
    make "packet-bytes rl $1f80 42
  ;  print :packet-bytes
  ;  print count :packet-bytes
    make "cnt :cnt + 1
    if (count :packet-bytes) > 4 [ process-packet70 ]
;    wait 10   ; wait 3 sec
;    ]
end


to update-packet
  make "packet-bytes rl $1fc0 42
  if (count :packet-bytes) > 4 [ process-packet ]
end

to process-packet
  let [th 0]
  let [tl 0]

  make "oldcheck :check
  let [nws ((first :packet-bytes) / 2)]
  make "check wnth :nws :packet-bytes
  if not (:check = :oldcheck) [ 
    make "type nth 1 :packet-bytes
  if (count :packet-bytes) > 4 [ process-packet ]
end

to process-packet
  let [th 0]
  let [tl 0]

  make "oldcheck :check
  let [nws ((first :packet-bytes) / 2)]
  make "check wnth :nws :packet-bytes
  if not (:check = :oldcheck) [ 
    make "type nth 1 :packet-bytes
    make "wp packet-words :packet-bytes
    print ( se word "T bf 100 + :type round now / 1000 :wp  )    ; from rfmbridge_v9
    make "th wnth 2 :packet-bytes         ; timestamph from packet
    make "tl wnth 3 :packet-bytes         ; timestampl from packet
    if :ftime = 0 [ make "ftime 1
                    make "t0 packet-time :th :tl
                  ]
    make "gyroz-data se :gyroz-data (packet-time :th :tl) - :t0
    make "gyroz-data se :gyroz-data wnth 11 :packet-bytes     ; word 11 is gyro z axis
    make "gyroz-data se :gyroz-data wnth 15 :packet-bytes     ; word 17 is Bx

    killscreen
    plot-gyroz
    display "|600x400+1000+100|
    plot-Bx
    display "|600x400+100+100|
  ]
end

to process-packet70
  let [th 0]
  let [tl 0]

  make "oldcheck :check
  let [nws ((first :packet-bytes) / 2)]
  make "check wnth :nws :packet-bytes
;  if not (:check = :oldcheck) [ 
    make "type nth 1 :packet-bytes
    make "wp packet-words :packet-bytes
    print ( se word "T bf 100 + :type round now / 1000 :wp  )    ; from rfmbridge_v9
    make "th wnth 2 :packet-bytes         ; timestamph from packet
    make "tl wnth 3 :packet-bytes         ; timestampl from packet
    if :ftime = 0 [ make "ftime 1
                    make "t0 packet-time :th :tl
                  ]
    make "cnts wnth 4 :packet-bytes
    print :cnts
    make "cnts wnth 5 :packet-bytes
    print :cnts
    make "cnts wnth 6 :packet-bytes
    print :cnts

;  ]
end

; The words in smplot.txt are generally useful for all experiments
; this file is reserved for special words

to init-data
make "data-list []
setup-screen
end

to init-packet
make "packet-bytes []
end

to packet-time :n :m
output (10 * :n) + (:m / 1000)
end

to packet-data :n
  make "packet-bytes (se :packet-bytes :n)
end

to show-packet
let [d :data-list]
repeat (count :d) 
  [ print nth 0 :d
    make "d bf :d ]
end

; prp = short for process-receive-packet
to prp
let [th 0]
let [tl 0]
let [p :packet-bytes ]
let [type nth 1 :p]
let [wp packet-words :p]

print ( se word "T bf 100 + :type round now / 1000 :wp  )    ; from rfmbridge_v9

make "th wnth 2 :packet-bytes         ; timestamph from packet
make "tl wnth 3 :packet-bytes         ; timestampl from packet



; gzout-data packet-time :th :tl wnth 11 :packet-bytes    ; word 11 is gyro z axis
gzout-data packet-time :th :tl wnth 17 :packet-bytes    ; word 11 is gyro z axis

plot-gyroz
plot-Bx
 
; if :type = 3 [process-mag-packet :wp]
end

; to packet-words :l
;  let [res []]
;  let [nws ((first :l) / 2) + 1]     ; + 1 for checksum
;  if ( :nws > 25 ) [ make "nws 25 ]
;  dotimes [i :nws][make "res se :res bf 100000 + wnth :i :l]
;  output :res
;end

to word-list :l
  let [res []]
  dotimes [i (wnth 0 :l) / 2][make "res se :res wnth :i + 1 :l]
  output :res
end

to wnth :i :l
;  print :i
;  print :l
  output (nth 2 * :i :l) + 256 * (nth 2 * :i + 1 :l)
end

to plot-gyroz
make "ncol 3
make "data-list :gyroz-data
xcol 1
ycol 2
select-all
limits xlower xupper ylower yupper
clean
grid 10 10
box
xaxis 10 1
yaxis 10 1
title "|GyroZ versus Time|
xlabel "|Time (seconds)|
ylabel "GyroZ
histogram
end

to plot-Bx
make "ncol 3
make "data-list :gyroz-data
xcol 1
ycol 3
select-all
limits xlower xupper ylower yupper
clean
grid 10 10
box
xaxis 10 1
yaxis 10 1
title "|Bx versus Time|
xlabel "|Time (seconds)|
ylabel "Bx
histogram
end

to display :n
let [screenloc "|600x400+1000+100|] 
; blindexec "|./pkill.sh xv|
; blindexec "|./pkill.sh Preview|
; blindexec "|pkill eog|
wait 10
redraw
; blindexec "|open -a Preview screen.png|
; blindexec "|eog -gn screen.png|
make "screenloc se "|/sw/bin/xv -geometry | :n
make "screenloc se :screenloc "| screen.png|
blindexec :screenloc
; blindexec "|/sw/bin/xv -geometry 600x400+1000+100 screen.png|
end

to killscreen
 blindexec "|./pkill.sh xv|
end

   

to Xmagdata
	getdata $500 256	;mag data plot
	plotmag "mag
        display-plot tile 2 2 2 2
        wait 20

	getdata $600 256	;ft plot
	plotmag "ft
        display-plot tile 2 2 2 1
        wait 20

;	ul-run [ print peak1 ]
;	ul-run [setf0 peak1 - 2] ;4/13/15 edit:  ul-run lines commented back in
;	ul-run [setf1 peak1 + 2]
;	ul-run [write_pd]
;	getdata $600 256	;ft plot
;	plotmag "ftX
;        display-plot tile 2 2 1 2
        wait 20

;	blindexec "|cp screen.png zoomedft.png|
;	displayzoomedFT
end

to getdata :m :n
   let[cnt 0]
   let[addr :m]
   make "tmp []
   make "magdata []
   let[div (:n / 32)]

   repeat :div [
      make "tmp1 rl :addr 32  ;'m' is hex address, 'n' is # of mag datum (n * 2 because each is 2 bytes)
      make "tmp se :tmp :tmp1
      make "addr :addr + 32
      ]

 repeat (count :tmp) / 2 [
      make "magword wnth :cnt :tmp
      if :magword > 32767 [make "magword :magword - 65536]
      make "magdata se :magdata :magword
      make "cnt :cnt + 1]

end

to plotmag :pname
   aspect 2 2 
   plot-filename :pname
   print (se "|Display | :pname "| Plot|)

   let [cnt 0]
   let [tdif 1]
   make "xlist []
   repeat count :magdata [
      make "xlist se :xlist :cnt * :tdif
      make "cnt :cnt + 1 ]

   x-data "|Time(sec)| :xlist
   y-data "|Magnetic field| :magdata

   ltype 0      ; black white lines
   ptype 2      ; circles

   limits 0 xupper ylower yupper

   clean
   select-all
   box
   xaxis 13 130 1 true
   yaxis 10 100 1 true

   title "|Magnetic field versus Time|
   histogram
end

to displaymag
   redraw
   wait 10
  clear-display
   display "|-geometry 600x400+1000+10|
end

to displayFT
   redraw
   wait 10
;   clear-display
   display "|-geometry 600x400+100+10|
end

to displayzoomedFT
   redraw
   wait 10
 ;  clear-display
   display "|-geometry 600x400+1000+400|
end


to display_mag
   let [value 0]
   make "mag_data rl 5120 50
   let [i 0]
   repeat (25) [
   make "value nth :i :mag_data
   make "value :value + 256 * (nth :i + 1 :mag_data)
   if :value > 32768 [make "value :value - 65535]
   print :value
   make "i :i + 2]

end

to display_pd
   let [value 0]

   make "pd_data rl 5376 32
   make "pd_data se :pd_data rl (5376 + 32) 32
   make "pd_data se :pd_data rl (5376 + 64) 32
   make "pd_data se :pd_data rl (5376 + 96) 32
   make "pd_data se :pd_data rl (5376 + 128) 32
   make "pd_data se :pd_data rl (5376 + 160) 32
   make "pd_data se :pd_data rl (5376 + 192) 32
   make "pd_data se :pd_data rl (5376 + 224) 32

   let [i 0]
   repeat (128) [
      make "value nth :i :pd_data
      make "value :value + 256 * (nth :i + 1 :pd_data)
      if :value > 32768 [make "value :value - 65535]
   print :value
   make "i :i + 2]

end

to wnth :i :l
  output (nth 2 * :i :l) + 256 * (nth 2 * :i + 1 :l)
end

to see-packets
  let [cnt 0]
  make "gyroz-data []
  make "check 0
  make "ftime 0
  setup-screen
  loop [
    ul-run [gyro-packet]
  ;  print :cnt
    make "packet-bytes rl $1fc0 42
  ;  print :packet-bytes
  ;  print count :packet-bytes
    make "cnt :cnt + 1clear-display
    if (count :packet-bytes) > 4 [ process-packet ]
    wait 30   ; wait 30 sec
    ]
end

to gyro-display
;blindexec "|./pkill.sh xv|
 blindexec "|./pkill.sh Preview|
; blindexec "|pkill eog|

wait 10
redraw
 blindexec "|open -a Preview screen.png|
; blindexec "|eog -gn screen.png|
;blindexec "|/sw/bin/xv -geometry 600x400+1000+100 screen.png|
end

to Xplot-gyroz
make "ncol 2
make "data-list :gyroz-data
xcol 1
ycol 2
select-all
limits xlower xupper ylower yupper
clean
grid 10 10
box
xaxis 10 1
yaxis 10 1
title "|GyroZ versus Time|
xlabel "|Time (seconds)|
ylabel "GyroZ
histogram
end

to packet-time :n :m
output (10 * :n) + (:m / 1000)
end

to plot-gyroZ
   aspect 2 2
   x-data "|Elapsed_Time_(sec)| :time-list  ;xdata is time
   y-data "|Gyro Z (adc_unit)|   :p60-word03 ;ydata is gyroz
   quick-plot  ;plot points as circles
   display-plot        tile 2 2 2 1
end

