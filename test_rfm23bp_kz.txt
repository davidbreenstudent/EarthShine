
constants [	

	  [p1dir $22][p1out $21][p1in $20]
          [p2dir $2a][p2out $29]
          [p3sel $1b]
          [p4dir $1E][p4out $1D][p4in $1C][p4sel $1F]
          [p5dir $32][p5out $31][p5in $30][p5sel $33]
	  [p6dir $36] [p6out $35]
          [ucb0ctl0 $68][ucb0ctl1 $69]

	  [ucb0br0 $6a][ucb0br1 $6b]

	  [ucb0stat $6d][ucb0rxbuf $6e][ucb0txbuf $6f]
          ;[packet $1f80][rpacket $1f00][test $1300]
          [packet $1fc0][rpacket $1400][test $1300]
          [command-center $380]
          
	  ]


global [baud ]
global [freqdev freq75 freq76 freq77]

define vm-run      [][ output btst p1in channel0 ]
define vm-run-init [][ bclr p1sel channel0
                       bclr p1dir channel0 ]

; In addition to this, all i/o pins must be enabled to operate 
define dp1enable [][ bclr p5sel channel3 ]
define dp2enable [][ bclr p5sel channel2 ]
define dp3enable [][ bclr p5sel channel1 ]
define dp4enable [][ bclr p5sel channel0 ]
define dp5enable [][ bclr p4sel channel1 ]
define dp6enable [][ bclr p4sel channel0 ]
define dp7enable [][ bclr p3sel channel7 ]
define dp8enable [][ bclr p3sel channel6 ]

to init-pins

writeb p2dir $38
writeb p2out $00
write adcctl0 $10
write adcctl1 $f8
bset adcae0 1
bset adcctl0 2

;dp4enable
;dp4output
;dp4off
dp5on   ; turn on radio power

alloff

end

to ul-power
        ; init-OnBoardLeds ;control the on board LEDs
        ; redon ;turns on the red LED
       ; wait 10 ;wait 1 second
        ; redoff ;turns off the red LED
        ; wait 10 ;wait 1 second
;         write $210 timestamph + 100   ; reset after 1000s
         ul-init
         ul-go
end

to ul-init
        ; yellowon ;turns on the red and green LEDs
       ; wait 10 ;wait 1 second
        ; alloff ;turns off the red and green LEDs
        ; wait 10 ;wait 1 second
      msp-init
      init-pins
      msp-init
end

to ul-go
        ; greenon ;turn on the green LED
        ; wait 10 ;wait 1 second
        ; alloff ;turn off the green LED
        ; wait 10 ;wait 1 second

;  setbaud 9600
  setbaud 501
  setfreqdev 0        ; overridden by baud rate table
  setfreq75  0        ; regs 75 0x53, 76 0xba, 77 0xa0 set to 437.465 MHz
  setfreq76  0
  setfreq77  0

;  rfm-init
  test-receive 
; loop [test-send mwait 4000]
end

to save-packet
; prs |got packet|

let [len rreg $4b
     addr rpacket]
;prh :len

make "addr rpacket
; prh rpacket
repeat :len [writeb :addr rreg $7f make "addr :addr + 1]

 ; make "addr rpacket 
 ; repeat :len [prh readb :addr
 ;                make "addr :addr + 1
 ;           ]
;  prs "


end

;  also in util.txt
;to wdchecksum :addr :len
;let [res 0]
;repeat :len / 2 
; [ make "res :res + read :addr 
;   make "addr :addr + 2]
;output :res
;end

constants [[status $202][inbuf $300][inbuf-len $301]]

define stray-packet? [] [output (readb status) and 2]
define clear-stray [] [bclrb status 2]

to test-receive
    rfm-init
;    test-send
; mwait 1000
;    test-send
   ; mwait 1000
    setup-rx
     loop [
;      rfm-init
   ;   setup-rx
      if(receive-packet?)
          [ alloff greenon save-packet setup-rx mwait 100 alloff ]
       mwait 1000 redon mwait 1000 alloff  
     ]
end

to test-send
  clear-res
  fprintb $aa
  fprintb 5
  fprintb 17
  fprintb $80
  fprintb $f9
  fprintb 0
  alloff
  mwait 1000
  blueon
  send-packet
  blueoff
end


to checksum :addr :len
let [res 0]
repeat :len 
 [ make "res :res + readb :addr 
   make "addr :addr + 1]
output :res
end


